version: '3.8'

services:
  zoo1:
    image: zookeeper:3.4.9
    container_name: zookeeper-1
    hostname: zoo1
    restart: always
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - ./zk-single-kafka-multiple/zoo1/data:/data
      - ./zk-single-kafka-multiple/zoo1/datalog:/datalog

  kafka1:
    image: confluentinc/cp-kafka:5.5.1
    container_name: kafka-1
    hostname: kafka1
    restart: always
    ports:
      - 9092:9092
    expose:
      - 19092
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./zk-single-kafka-multiple/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1

  kafka2:
    image: confluentinc/cp-kafka:5.5.1
    container_name: kafka-2
    restart: always
    hostname: kafka2
    ports:
      - 9093:9093
    expose:
      - 19093
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./zk-single-kafka-multiple/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zoo1


  kafka3:
    image: confluentinc/cp-kafka:5.5.1
    container_name: kafka-3
    restart: always
    hostname: kafka3
    ports:
      - 9094:9094
    expose:
      - 19904
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./zk-single-kafka-multiple/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zoo1

  db:
    image: mysql
    container_name: db-mysql
    ports:
      - 3306:3306
    expose:
      - 3306
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: musicPlayer
    volumes:
      - ./mySql_data:/var/lib/mysql

  rest-app:
    build: ../rest-app
    container_name: rest-app
    ports:
      - 8080:8080
    expose:
      - 8080
    restart: always
    environment:
      DB_HOSTNAME: db
      KAFKA_HOST_NAME: kafka1
      KAFKA_PORT: 19092
    depends_on:
      - db
      - zoo1
      - kafka1
      - kafka2
      - kafka3
    command: [ "./wait-for-it.sh", "-t", "180", "db:3306", "--strict", "--",
               "./wait-for-it.sh", "-t", "180", "kafka1:19092", "--strict", "--",
               "./wait-for-it.sh", "-t", "180", "kafka2:19093", "--strict", "--",
               "./wait-for-it.sh", "-t", "180", "kafka3:19094", "--strict", "--",
               "java", "-jar", "-Dspring.profiles.active=mySql", "app.jar" ]

  kafka-consumer-app:
    build: ../kafka-consumer-dao
    container_name: kafka-consumer-app
    ports:
      - 8095:8095
    expose:
      - 8095
    environment:
      DB_HOSTNAME: db
      KAFKA_HOST_NAME: kafka1
      KAFKA_PORT: 19092
    restart: always
    depends_on:
      - db
      - rest-app
      - zoo1
      - kafka1
      - kafka2
      - kafka3
    command: [ "./wait-for-it.sh", "-t", "180", "rest-app:8080", "--strict", "--",
               "java", "-jar", "-Dspring.profiles.active=mySql", "app.jar" ]

  web-app:
    build: ../web-app
    container_name: web-app
    ports:
      - 8090:8090
    restart: always
    environment:
      HOST_NAME: rest-app
    depends_on:
      - rest-app
      - kafka-consumer-app
      - zoo1
      - db
      - kafka1
      - kafka2
      - kafka3
    command: [ "./wait-for-it.sh", "-t", "180", "kafka-consumer-app:8095", "--strict", "--",
               "java", "-jar", "app.jar" ]